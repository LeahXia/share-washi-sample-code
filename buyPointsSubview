//
//  buyPointsUIView.swift
//  shareWashi
//
//  Created by Leah Xia on 2018-01-27.
//  Copyright Â© 2018 Leah Xia. All rights reserved.
//

import UIKit

protocol BuyPointsDelegate {
    func didBuyPointsButtonTapped(product:String, price:Double)
    func didEarnPointsButtonTapped(points:Double)
}

class BuyPointsView: UIView, UITextFieldDelegate{

    var buyPointsDelegate:BuyPointsDelegate?
    var isEarnPointsBtnEnabled:Bool?
    var earnPointsStreak:Int?
    var myPoints:Double?
    var myCpc:Double?

    //for segue
    var price:Double?
    var product:String?

    //UI elements
    let separationView1: UIView = {
        let view = UIView()
        view.backgroundColor = .gray
        return view
    }()

    let totalPointsLabel = UILabel()

    let totalPointsData = UILabel()

    var previousCheckedButton:UIButton?

    let check100Button = UIButton()
    let check80Button = UIButton()
    let check50Button = UIButton()
    let check10Button = UIButton()
    let checkOtherButton = UIButton()
    var checkButtons = [UIButton]()

    let otherAmountTextField = TextFieldWithPadding()

    let earnPointsButton = UIButton()

    let buyPointsButton = UIButton()

    let separationView2: UIView = {
        let view = UIView()
        view.backgroundColor = .gray
        return view
    }()

    var preset100PointsView = PresetPointPriceSection()

    //constraints
    var viewHeight:CGFloat?
    var buttonWidth:CGFloat?
    var buyBtnTopConstraint:NSLayoutConstraint?


    //initialize sub-class
    convenience init(hasEarnBtn:Bool=false,myPoints:Double=0) {
        self.init(frame: UIScreen.main.bounds)

        initialize(hasEarnBtn:hasEarnBtn,myPoints:myPoints)

    }

    override init(frame: CGRect) {

        super.init(frame: frame)

    }

    required init?(coder aDecoder: NSCoder) {

        fatalError("init(coder:) has not been implemented")

    }

    func initialize(hasEarnBtn:Bool=false,myPoints:Double=0){

        self.myPoints = myPoints

        let myPointsStr = String(format: "%0.2f", myPoints )
        totalPointsData.text = myPointsStr + " pts"

        addViews()

        handleButtons(hasEarnBtn: hasEarnBtn)

        otherAmountTextField.delegate = self

    }


    func addViews(){

        addSubview(separationView1)
        addConstraintsWithFormat("H:|[v0]|", views: separationView1)
        addConstraintsWithFormat("V:|[v0]", views: separationView1)
        addConstraint(NSLayoutConstraint(item: separationView1, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .height, multiplier: 0, constant: 1))


        let pointLabelWidth = (frame.width - 32 - 10) / 2

        addSubview(totalPointsLabel)
        totalPointsLabel.setDescribingLabel(text: "Total points:")
        totalPointsLabel.font = UIFont(name: "AvenirNext-DemiBold", size: 22)
        totalPointsLabel.textAlignment = .right

        addSubview(totalPointsData)
        totalPointsData.setPurpleHeaddingLabel()
        totalPointsData.font = UIFont(name: "AvenirNext-DemiBold", size: 22)
        totalPointsData.textAlignment = .left

        addConstraintsWithFormat("H:|-16-[v0(\(pointLabelWidth))]-10-[v1(\(pointLabelWidth))]", views: totalPointsLabel,totalPointsData)
        addConstraint(NSLayoutConstraint(item: totalPointsLabel, attribute: .top, relatedBy: .equal, toItem: separationView1, attribute: .bottom, multiplier: 1, constant: 12))
        addConstraint(NSLayoutConstraint(item: totalPointsData, attribute: .top, relatedBy: .equal, toItem: separationView1, attribute: .bottom, multiplier: 1, constant: 12))
        addConstraint(NSLayoutConstraint(item: totalPointsLabel, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .height, multiplier: 1, constant: 30))
        addConstraint(NSLayoutConstraint(item: totalPointsData, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .height, multiplier: 1, constant: 30))


        let presetViewWidth:CGFloat = 145
        let presetViewHeight:CGFloat = 43
        let margin = (frame.width - presetViewWidth - presetViewWidth) / 4


        preset100PointsView = PresetPointPriceSection(points:100,checkButton:check100Button)
        let preset80PointsView = PresetPointPriceSection(points:80,checkButton:check80Button)
        let preset50PointsView = PresetPointPriceSection(points:50,checkButton:check50Button)
        let preset10PointsView = PresetPointPriceSection(points:10,checkButton:check10Button)
        let presetOtherPointsView = PresetPointPriceSection(points:0,checkButton:checkOtherButton,textField:otherAmountTextField)

        addSubview(preset100PointsView)
        addSubview(preset80PointsView)
        addSubview(preset50PointsView)
        addSubview(preset10PointsView)
        addSubview(presetOtherPointsView)
        otherAmountTextField.setBorderedTextFieldCreatedByCode(placeHolder:"enter points",fontSize: 14, leftPadding:0.5)
        otherAmountTextField.keyboardType = .asciiCapableNumberPad


        addConstraintsWithFormat("H:|-\(margin)-[v0(\(presetViewWidth))]-\(margin*2)-[v1(\(presetViewWidth))]", views: preset100PointsView,preset10PointsView)

        addConstraintsWithFormat("H:|-\(margin)-[v0(\(presetViewWidth))]-\(margin*2)-[v1(\(presetViewWidth))]", views: preset80PointsView,presetOtherPointsView)

        addConstraintsWithFormat("H:|-\(margin)-[v0(\(presetViewWidth))]", views: preset50PointsView)


        addConstraintsWithFormat("V:[v0]-12-[v1(\(presetViewHeight))]-12-[v2(\(presetViewHeight))]-12-[v3(\(presetViewHeight))]", views: totalPointsLabel,preset100PointsView,preset80PointsView,preset50PointsView)

        addConstraintsWithFormat("V:[v0(\(presetViewHeight))]-12-[v1(\(presetViewHeight))]", views: preset10PointsView,presetOtherPointsView)

        addConstraint(NSLayoutConstraint(item: preset10PointsView, attribute: .top, relatedBy: .equal, toItem: preset100PointsView, attribute: .top, multiplier: 1, constant: 0))


        buttonWidth = frame.width / 2 - 16
        let buttonMargin = (frame.width - buttonWidth! - buttonWidth!) / 4
        addSubview(earnPointsButton)
        earnPointsButton.setEnabledButton(title:"Earn 5 pts")
        addSubview(buyPointsButton)
        buyPointsButton.setEnabledButton(title:"Buy points")


        addConstraintsWithFormat("H:|-\(buttonMargin)-[v0(\(buttonWidth ?? 0))]-\(buttonMargin)-[v1(\(buttonWidth ?? 0))]", views: earnPointsButton,buyPointsButton)
        addConstraint(NSLayoutConstraint(item: earnPointsButton, attribute: .top, relatedBy: .equal, toItem: preset50PointsView, attribute: .bottom, multiplier: 1, constant: 12))



        addSubview(separationView2)
        addConstraintsWithFormat("H:|[v0]|", views: separationView2)
        addConstraint(NSLayoutConstraint(item: separationView2, attribute: .top, relatedBy: .equal, toItem: earnPointsButton, attribute: .bottom, multiplier: 1, constant: 12))
        addConstraint(NSLayoutConstraint(item: separationView2, attribute: .height, relatedBy: .equal, toItem: self, attribute: .height, multiplier: 0, constant: 1))


    }



    func handleButtons(hasEarnBtn:Bool){

        handleHasEarnBtn(hasEarnBtn: hasEarnBtn)

        check100Button.tag = 100
        check80Button.tag = 80
        check50Button.tag = 50
        check10Button.tag = 10
        checkOtherButton.tag = 0

        checkButtons = [check100Button,check80Button,check50Button,check10Button,checkOtherButton]

        checkButtons.forEach { (btn) in
            btn.addTarget(self, action: #selector(checkButtonSelected), for: .touchUpInside)
        }

        addTargetToButtons()
    }

    //change layout for popup view which doesn't have earnPointsButton
    func handleHasEarnBtn(hasEarnBtn:Bool){
        if !hasEarnBtn{
            earnPointsButton.isEnabled = false
            earnPointsButton.backgroundColor = .white
            buyBtnTopConstraint = NSLayoutConstraint(item: buyPointsButton, attribute: .top, relatedBy: .equal, toItem: otherAmountTextField, attribute: .bottom, multiplier: 1, constant: 12)
        }else{
            buyBtnTopConstraint = NSLayoutConstraint(item: buyPointsButton, attribute: .top, relatedBy: .equal, toItem: earnPointsButton, attribute: .top, multiplier: 1, constant: 0)
        }
        addConstraint(buyBtnTopConstraint!)
    }

    func addTargetToButtons(){
        earnPointsButton.addTarget(self, action: #selector(earnPointsButtonTapped), for: .touchUpInside)
        buyPointsButton.addTarget(self, action: #selector(buyPointsButtonTapped), for: .touchUpInside)
    }

    @objc func checkButtonSelected(sender:UIButton){

        switchCheckedImage(sender: sender)

        if sender.tag != 0 {
            let points = Double(sender.tag)
            self.product = "\(sender.tag) points"
            self.price = self.preset100PointsView.pointPriceAfterDiscount(points: points)
        }
    }

    func switchCheckedImage(sender:UIButton){
        if previousCheckedButton != nil {
            previousCheckedButton?.setImage(UIImage(named: "check-no.png"), for: .normal)
        }

        previousCheckedButton = sender
        sender.setImage(UIImage(named: "check-yes.png"), for: .normal)
    }


    @objc func buyPointsButtonTapped(){
        guard previousCheckedButton != nil else{
            showAlertWithOops(message: "Please select the anount of points you want to buy")
            return
        }

        if previousCheckedButton?.tag == 0 {
            guard let points = otherAmountTextField.text else{
                showAlertWithOops(message: "Please enter the anount of points you want to buy")
                return
            }
            if points.isInt && Int(points)! > 0 {
                self.product = points + " Points"
                self.price = self.preset100PointsView.pointPriceAfterDiscount(points: Double(points)!)
            }else{
                showAlertWithOops(message: "The amount of points should be greater than 0")
                return
            }
        }

        buyPointsDelegate?.didBuyPointsButtonTapped(product:self.product!, price:self.price!)

    }


    @objc func earnPointsButtonTapped(){

        addPointsAfterEarnPointsBtnTapped()

        buyPointsDelegate?.didEarnPointsButtonTapped(points: self.myPoints!)

        let alert = AlertView(title: "Points Earned!", message: "Keep the streak and earn 10 points a day plus 20 bonus points for every 7 consecutive days!")
        alert.show(animated: true)
    }

    func addPointsAfterEarnPointsBtnTapped(){

        earnPointsButton.disableButton()

        var pointsEarned:Double = 0

        if earnPointsStreak == 0 {
            pointsEarned = 5
        }else{
            pointsEarned = 10
        }

        if (earnPointsStreak! + 1) % 7 == 0 {
            pointsEarned += 20
        }

        self.myPoints! += pointsEarned

    }


    func textFieldDidBeginEditing(_ textField: UITextField) {

        if textField == otherAmountTextField {

            switchCheckedImage(sender: checkOtherButton)

        }

    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {

        textField.resignFirstResponder()

        return true
    }

    // This function will be called from previous view when data is loaded to update some of the data in this view
    func updatePageParas(myPoints:Double,isEarnPointsBtnEnabled:Bool,earnPointsStreak:Int){

        let myPointsStr = String(format: "%0.2f", myPoints )
        totalPointsData.text = myPointsStr + " pts"

        self.earnPointsStreak = earnPointsStreak

        self.isEarnPointsBtnEnabled = isEarnPointsBtnEnabled

        if earnPointsStreak > 0 {
            earnPointsButton.setTitle("Earn 10 Points", for: .normal)
        }else {
            earnPointsButton.setTitle("Earn 5 Points", for: .normal)
        }

        if isEarnPointsBtnEnabled == true {

            earnPointsButton.enableButton()

        }else{

            earnPointsButton.disableButton()

        }
    }
}







class PresetPointPriceSection:UIView {

    var checkButton = UIButton()
    var otherAmountTextField = UITextField()

    let pointsLabel:UILabel = {
        let label = UILabel()
        label.textColor = Colors.selectedColor
        label.font = UIFont(name: "AvenirNext-Medium", size: 14)
        return label
    }()

    let priceLabel:UILabel = {
        let label = UILabel()
        label.textColor = Colors.almostBlack
        label.font = UIFont(name: "AvenirNext-Medium", size: 14)
        return label
    }()

    let wasPriceLabel:UILabel = {
        let label = UILabel()
        label.textColor = Colors.labelGray
        label.font = UIFont(name: "AvenirNext-Medium", size: 14)
        return label
    }()


    convenience init(points:Double,checkButton:UIButton,textField:UITextField? = nil) {
        self.init(frame: UIScreen.main.bounds)
        if textField != nil {
            initialize(points:points,checkButton:checkButton,textField:textField)
        }else{
            initialize(points:points,checkButton:checkButton)
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func initialize(points:Double,checkButton:UIButton,textField:UITextField? = nil){

        self.checkButton = checkButton
        self.checkButton.setImage(UIImage(named: "check-no.png"), for: .normal)
        self.translatesAutoresizingMaskIntoConstraints = false
        setConstraints()

        if points == 0 {
            pointsLabel.text = "Other amount"
            priceLabel.isHidden = true
            wasPriceLabel.isHidden = true
            addOtherAmountTextField(textField:textField!)
        }else{
            pointsLabel.text = "\(Int(points)) points"
            let price = Int(pointPriceAfterDiscount(points: points))
            let wasPrice = Int(points)
            priceLabel.text = "Â¥ \(price)"
            let wasPriceText = "Price: Â¥\(wasPrice)"
            wasPriceLabel.attributedText = wasPriceText.strikeThroughText(strikeString: "Â¥\(wasPrice)")
        }


    }

    func addOtherAmountTextField(textField:UITextField){
        self.otherAmountTextField = textField
        otherAmountTextField.translatesAutoresizingMaskIntoConstraints = false

        self.addSubview(otherAmountTextField)
        self.addConstraint(NSLayoutConstraint(item: otherAmountTextField, attribute: .left, relatedBy: .equal, toItem: pointsLabel, attribute: .left, multiplier: 1, constant: 1))
        self.addConstraint(NSLayoutConstraint(item: otherAmountTextField, attribute: .right, relatedBy: .equal, toItem: pointsLabel, attribute: .right, multiplier: 1, constant: 15))
        self.addConstraint(NSLayoutConstraint(item: otherAmountTextField, attribute: .top, relatedBy: .equal, toItem: pointsLabel, attribute: .bottom, multiplier: 1, constant: 3))
        self.addConstraint(NSLayoutConstraint(item: otherAmountTextField, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .height, multiplier: 1, constant: 25))
    }


    func setConstraints(){

        addSubview(checkButton)
        addSubview(pointsLabel)
        addSubview(priceLabel)
        addSubview(wasPriceLabel)

        self.addConstraintsWithFormat("H:|[v0(20)]-8-[v1]-4-[v2]", views: checkButton,pointsLabel,priceLabel)
        self.addConstraintsWithFormat("V:|[v0(20)]", views: checkButton)
        self.addConstraintsWithFormat("V:|[v0(20)]-3-[v1]", views: pointsLabel,wasPriceLabel)
        self.addConstraintsWithFormat("V:|[v0(20)]", views: priceLabel)
        self.addConstraint(NSLayoutConstraint(item: wasPriceLabel, attribute: .left, relatedBy: .equal, toItem: pointsLabel, attribute: .left, multiplier: 1, constant: 1))
    }

    func pointPriceAfterDiscount(points:Double) -> Double{
        let priceUnit = points
        var price:Double?
        if points > 0 && points < 30 {
            price = priceUnit
        }else if points >= 30 && points < 50 {
            price = priceUnit * 0.95
        }else if points >= 50 && points < 80 {
            price = priceUnit * 0.9
        }else if points >= 80 {
            price = priceUnit * 0.8
        }else{
            let alert = AlertView(title: "Oops", message: "Point number need to be greater than 0")
            alert.show(animated:true)
        }
        return price!
    }
}
